name: Release to Spin Cloud

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "spin"
  cancel-in-progress: false

jobs:
  Spin-Release:

    timeout-minutes: 10

    environment:
      name: production
      url: ${{ steps.deployment.outputs.app-url }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4 # repo checkout

      # Install Rust Nightly Toolchain, with Clippy & Rustfmt
      - name: Install nightly Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
            path: |
                ~/.cargo/bin/
                ~/.cargo/registry/index/
                ~/.cargo/registry/cache/
                ~/.cargo/git/db/
                target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache npm artifacts
        uses: actions/cache@v4
        with:
            path: |
                ~/.npm
            key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Add WASM & WASI targets
        run: rustup target add wasm32-unknown-unknown && rustup target add wasm32-wasi

      # If using tailwind...
      - name: Install npm dependencies
        run: npm install


      - name: Download and install Trunk binary
        run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-


      - name: Build with Trunk
        run: ./trunk build --release

      # Install Spin CLI & Deploy

      - name: Setup Spin
        uses: fermyon/actions/spin/setup@v1
        # with:
          # plugins:


      - name: Build and deploy
        id: deployment
        uses: fermyon/actions/spin/deploy@v1
        with:
          fermyon_token: ${{ secrets.FERMYON_CLOUD_TOKEN }}
          # key_values: |-
            # abc=xyz
            # foo=bar
          # variables: |-
            # password=${{ secrets.SECURE_PASSWORD }}
            # apikey=${{ secrets.API_KEY }}

      # Create an explicit message to display the URL of the deployed app, as well as in the job graph
      - name: Deployed URL
        run: |
          echo "Deployed app URL: ${{ steps.deployment.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY